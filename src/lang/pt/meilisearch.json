{
  "working_dir": "Diretório de Trabalho",
  "db_path": "Designa o local onde os arquivos de banco de dados serão criados e recuperados",
  "env": "Configura o ambiente da instância. O valor deve ser `production` ou `development`.",
  "http_addr": "O endereço no qual o servidor HTTP irá escutar.",
  "master_key": "Define a chave mestra da instância, protegendo automaticamente todas as rotas exceto GET /health.",
  "no_analytics": "Desativa a telemetria integrada do Meilisearch quando fornecido.\nO Meilisearch coleta automaticamente dados de todas as instâncias que não optam por sair usando esta flag.\nTodos os dados coletados são usados exclusivamente para o propósito de melhorar o Meilisearch, e podem ser excluídos a qualquer momento.",
  "http_payload_size_limit": "Define o tamanho máximo de payloads aceitos.",
  "log_level": "Define quanto detalhe deve estar presente nos logs do Meilisearch.\nO Meilisearch atualmente suporta seis níveis de log, listados em ordem de verbosidade crescente: `OFF`, `ERROR`, `WARN`, `INFO`, `DEBUG`, `TRACE`",
  "max_indexing_memory": "Define a quantidade máxima de RAM que o Meilisearch pode usar ao indexar.",
  "max_indexing_threads": "Define o número máximo de threads que o Meilisearch pode usar durante a indexação.",
  "dump_dir": "Define o diretório onde o Meilisearch criará arquivos de dump.",
  "import_dump": "Importa o arquivo de dump localizado no caminho especificado. O caminho deve apontar para um arquivo .dump.",
  "ignore_missing_dump": "Impede que o Meilisearch lance um erro quando `import_dump` não aponta para um arquivo de dump válido.",
  "ignore_dump_if_db_exists": "Impede que uma instância do Meilisearch com um banco de dados existente lance um erro ao usar `import_dump`.",
  "schedule_snapshot": "Habilita snapshots agendados quando verdadeiro, desabilita quando falso (o padrão).\nSe o valor for dado como um inteiro, então habilita o snapshot agendado com o valor passado como o intervalo entre cada snapshot, em segundos.",
  "snapshot_dir": "Define o diretório onde o Meilisearch armazenará snapshots.",
  "import_snapshot": "Inicia o Meilisearch após importar um snapshot previamente gerado no caminho de arquivo dado.",
  "ignore_missing_snapshot": "Impede que uma instância do Meilisearch lance um erro quando `import_snapshot` não aponta para um arquivo de snapshot válido.",
  "ignore_snapshot_if_db_exists": "Impede que uma instância do Meilisearch com um banco de dados existente lance um erro ao usar `import_snapshot`.",
  "ssl_auth_path": "Habilita autenticação de cliente no caminho especificado.",
  "ssl_cert_path": "Define os certificados SSL do servidor.",
  "ssl_key_path": "Define os arquivos de chave SSL do servidor.",
  "ssl_ocsp_path": "Define o arquivo OCSP do servidor.",
  "ssl_require_auth": "Torna a autenticação SSL obrigatória.",
  "ssl_resumption": "Ativa a retomada de sessão SSL.",
  "ssl_tickets": "Ativa tickets SSL.",
  "experimental_enable_metrics": "Recurso experimental de métricas. Habilita as métricas Prometheus no endpoint `GET /metrics`.",
  "experimental_reduce_indexing_memory_usage": "Redução experimental de RAM durante indexação, não use em produção.",
  "experimental_max_number_of_batched_tasks": "Reduz experimentalmente o número máximo de tarefas que serão processadas de uma vez."
}
