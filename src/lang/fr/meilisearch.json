{
  "working_dir": "Répertoire de travail",
  "db_path": "Désigne l'emplacement où les fichiers de base de données seront créés et récupérés",
  "env": "Configure l'environnement de l'instance. La valeur doit être soit \"production\" soit \"development\".",
  "http_addr": "L'adresse sur laquelle le serveur HTTP écoutera.",
  "master_key": "Définit la clé principale de l'instance, protégeant automatiquement toutes les routes sauf GET /health.",
  "no_analytics": "Désactive la télémétrie intégrée de Meilisearch lorsqu'elle est fournie.\nMeilisearch collecte automatiquement des données de toutes les instances qui ne se désinscrivent pas à l'aide de ce drapeau.\nToutes les données collectées sont utilisées uniquement dans le but d'améliorer Meilisearch et peuvent être supprimées à tout moment.",
  "http_payload_size_limit": "Définit la taille maximale des charges utiles acceptées.",
  "log_level": "Définit le niveau de détail des journaux de Meilisearch.\nMeilisearch prend actuellement en charge six niveaux de journalisation, classés par ordre croissant de verbosité : `OFF`, `ERROR`, `WARN`, `INFO`, `DEBUG`, `TRACE`",
  "max_indexing_memory": "Définit la quantité maximale de RAM que Meilisearch peut utiliser lors de l'indexation.",
  "max_indexing_threads": "Définit le nombre maximal de threads que Meilisearch peut utiliser pendant l'indexation.",
  "dump_dir": "Définit le répertoire où Meilisearch créera les fichiers de vidage.",
  "import_dump": "Importe le fichier de vidage situé au chemin spécifié. Le chemin doit pointer vers un fichier .dump.",
  "ignore_missing_dump": "Empêche Meilisearch de générer une erreur lorsque `import_dump` ne pointe pas vers un fichier de vidage valide.",
  "ignore_dump_if_db_exists": "Empêche une instance de Meilisearch avec une base de données existante de générer une erreur lors de l'utilisation de `import_dump`.",
  "schedule_snapshot": "Active les instantanés planifiés lorsqu'il est vrai, désactive lorsqu'il est faux (par défaut).\nSi la valeur est donnée sous forme d'entier, active les instantanés planifiés avec la valeur passée comme intervalle entre chaque instantané, en secondes.",
  "snapshot_dir": "Définit le répertoire où Meilisearch stockera les instantanés.",
  "import_snapshot": "Lance Meilisearch après avoir importé un instantané précédemment généré au chemin donné.",
  "ignore_missing_snapshot": "Empêche une instance de Meilisearch de générer une erreur lorsque `import_snapshot` ne pointe pas vers un fichier d'instantané valide.",
  "ignore_snapshot_if_db_exists": "Empêche une instance de Meilisearch avec une base de données existante de générer une erreur lors de l'utilisation de `import_snapshot`.",
  "ssl_auth_path": "Active l'authentification client dans le chemin spécifié.",
  "ssl_cert_path": "Définit les certificats SSL du serveur.",
  "ssl_key_path": "Définit les fichiers de clé SSL du serveur.",
  "ssl_ocsp_path": "Définit le fichier OCSP du serveur.",
  "ssl_require_auth": "Rend l'authentification SSL obligatoire.",
  "ssl_resumption": "Active la reprise de session SSL.",
  "ssl_tickets": "Active les tickets SSL.",
  "experimental_enable_metrics": "Fonctionnalité expérimentale de métriques. Active les métriques Prometheus sur le point de terminaison `GET /metrics`.",
  "experimental_reduce_indexing_memory_usage": "Réduction expérimentale de la RAM pendant l'indexation, ne pas utiliser en production.",
  "experimental_max_number_of_batched_tasks": "Réduit expérimentalement le nombre maximum de tâches qui seront traitées en une seule fois."
}
